import json
import logging
import os

from aiogram.client.session import aiohttp
from aiohttp import ClientSession
from aiogram import Router, F, html, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup

from inline_kbs import ease_link_kb, kb1, fin, link_kb0, f_s, kbg, contact_kb
from text_messages import cont, about_pr, hp, stick_pr

start_router = Router()
logging.basicConfig(level=logging.INFO)


class SaveStatus(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    Q5a = State()
    Q5b = State()
    Q5c = State()
    Q5d = State()
    Q6 = State()
    Q6a = State()
    Q6b = State()
    Q6c = State()
    Q6d = State()


# –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –±–æ—Ç–æ–º
@start_router.message(CommandStart())  # —Å—Ç–∞—Ä—Ç, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def cmd_start(message: Message):
    """
    This handler receives messages with `/start` command
    """
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.bold(message.from_user.full_name)}!\n"
                         f"–Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ª—é–∫–æ–≤", reply_markup=ease_link_kb())


@start_router.callback_query(F.data == 'contact')  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
async def send_contact(call: CallbackQuery):
    await call.message.edit_text(cont, reply_markup=ease_link_kb())
    await call.answer()


@start_router.message(F.text == '/contact')
async def send_contact(message: types.Message):
    await message.answer(cont, reply_markup=ease_link_kb())


@start_router.callback_query(F.data == 'about')  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –ø—Ä–æ–µ–∫—Ç–µ"
async def send_about_project(call: CallbackQuery):
    await call.message.edit_text(about_pr, reply_markup=ease_link_kb())
    await call.answer()


@start_router.message(F.text == '/about')
async def send_about_com(message: types.Message):
    await message.answer(about_pr, reply_markup=ease_link_kb())


@start_router.callback_query(F.data == 'stick')  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –ø—Ä–æ–µ–∫—Ç–µ"
async def send_stick(call: CallbackQuery):
    await call.message.edit_text(stick_pr, reply_markup=ease_link_kb())
    await call.answer()


@start_router.callback_query(F.data == 'cancel')  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
async def stop_survey(call: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryStorage
    await state.clear()
    await call.answer()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ease_link_kb())


@start_router.message(F.text == '/cancel')
async def send_about_com(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryStorage
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ease_link_kb())


@start_router.message(F.text == '/help')
async def send_help(message: types.Message):
    await message.answer(hp, reply_markup=ease_link_kb())


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏
@start_router.callback_query(F.data == 'application')  # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def send_photo(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–°–¥–µ–ª–∞–π—Ç–µ 5 —Ñ–æ—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ª—é–∫–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–∞—Ö: \n"
                              "–æ–¥–Ω—É –≤–±–ª–∏–∑–∏ –∏ —á–µ—Ç—ã—Ä–µ —Å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º–∏. \n"
                              "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–±–ª–∏–∑–∏ –≤ —Ä–µ–∂–∏–º–µ ¬´—Ñ–æ—Ç–æ¬ª 1 —à—Ç.\n")
    await call.answer()
    await state.set_state(SaveStatus.Q1)


@start_router.message(SaveStatus.Q1)
async def handle_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    directory = 'photos'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    if not os.path.exists(directory):
        os.makedirs(directory)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    photos = data.get('photos', [])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é (–Ω–∞–∏–ª—É—á—à—É—é) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
        best_photo = message.photo[-1]
        file_id = best_photo.file_id
        file = await message.bot.get_file(file_id)
        file_path = os.path.join(directory, f"{file_id}.jpg")  # –ü—É—Ç—å —Ñ–∞–π–ª–∞

        await message.bot.download_file(file.file_path, file_path)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é

        photos.append(file_path)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
        await state.update_data(photos=photos)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        total_photos = len(photos)  # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        if total_photos == 1:
            await message.reply("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 4 —Ñ–æ—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ª—é–∫–∞ —Å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è–º–∏ –≤ —Ä–µ–∂–∏–º–µ ¬´—Ñ–æ—Ç–æ¬ª. üì∑")

        if total_photos == 5:
            await message.answer("–í—Å–µ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.",
                                 reply_markup=kbg())
    else:
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª—é–∫–∞.")


@start_router.callback_query(F.data == 'kb_geo')  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
async def send_geo(call: types.CallbackQuery,  state: FSMContext):
    button_geo = [[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard=button_geo, resize_keyboard=True)  # —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É
    await call.message.answer("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558, 37.6173) \n"
                              "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üëá", reply_markup=reply_markup)
    await call.answer()
    await state.set_state(SaveStatus.Q2)


@start_router.message(F.content_type == types.ContentType.LOCATION, SaveStatus.Q2)  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
async def location_handler(message: types.Message, state: FSMContext):
    await state.update_data(location=message.location)
    await message.answer(text="–°–ø–∞—Å–∏–±–æ!", reply_markup=types.ReplyKeyboardRemove())  # —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É
    await message.answer(text="–í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?", reply_markup=link_kb0())
    await state.set_state(SaveStatus.Q3)  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞


# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Ä—É—á–Ω—É—é (–≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞)

@start_router.message(SaveStatus.Q2)
async def manual_coordinates(message: types.Message, state: FSMContext):
    try:
        lat, lon = map(float, message.text.split(','))
        location = types.Location(latitude=lat, longitude=lon)
        await state.update_data(location=location)
        await message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!", reply_markup=types.ReplyKeyboardRemove())
        await message.answer(text="–í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?", reply_markup=link_kb0())
        await state.set_state(SaveStatus.Q3)
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558, 37.6173)."
        )


@start_router.message(SaveStatus.Q3)
async def send_address(message: types.Message, state: FSMContext):
    user_city = message.text.lower()  # –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(city=user_city)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer(text="–ê–¥—Ä–µ—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–¥–∞–Ω–∏—è", reply_markup=link_kb0())
    await state.set_state(SaveStatus.Q4)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É


@start_router.message(SaveStatus.Q4)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω–ª–∏–Ω –∫–Ω–æ–ø–∫—É –≤ –æ–±—ã—á–Ω—É—é
async def send_description(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.lower())  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer(text='–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', reply_markup=kb1())
    await state.set_state(SaveStatus.Q5)


@start_router.callback_query(F.data == 'Q5')  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def send_contacts(callback_query: types.CallbackQuery):
    await callback_query.message.answer('–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏? (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                                        reply_markup=contact_kb())
    await callback_query.answer()


@start_router.message(SaveStatus.Q5)  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_contacts(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.lower())
    await message.answer(text="–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏? (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                         reply_markup=contact_kb())


@start_router.callback_query(F.data == 'Q5a')
async def send_email(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–£–∫–∞–∂–∏—Ç–µ Email',
                                        reply_markup=link_kb0())
    await callback_query.answer()
    await state.set_state(SaveStatus.Q6a)


@start_router.callback_query(F.data == 'Q5b')
async def send_whatsapp(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–£–∫–∞–∂–∏—Ç–µ Whatsapp',
                                        reply_markup=link_kb0())
    await callback_query.answer()
    await state.set_state(SaveStatus.Q6b)


@start_router.callback_query(F.data == 'Q5c')
async def send_telegram(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–£–∫–∞–∂–∏—Ç–µ Telegram (–±–µ–∑ @)',
                                        reply_markup=link_kb0())
    await callback_query.answer()
    await state.set_state(SaveStatus.Q6c)


@start_router.callback_query(F.data == 'Q5d')
async def send_phone(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                                        reply_markup=link_kb0())
    await callback_query.answer()
    await state.set_state(SaveStatus.Q6d)


@start_router.message(SaveStatus.Q6a)  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_email_input(message: types.Message, state: FSMContext):
    user_email = message.text.lower()
    await state.update_data(contacts=user_email)
    await message.answer(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", reply_markup=fin())


@start_router.message(SaveStatus.Q6b)  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_whatsapp_input(message: types.Message, state: FSMContext):
    user_whatsapp = message.text.lower()
    await state.update_data(contacts=user_whatsapp)
    await message.answer(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", reply_markup=fin())


@start_router.message(SaveStatus.Q6c)  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_telegram_input(message: types.Message, state: FSMContext):
    user_telegram = message.text.lower()
    await state.update_data(contacts=user_telegram)
    await message.answer(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", reply_markup=fin())


@start_router.message(SaveStatus.Q6d)  # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_phone_input(message: types.Message, state: FSMContext):
    user_phone = message.text.lower()
    await state.update_data(contacts=user_phone)
    await message.answer(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", reply_markup=fin())


@start_router.callback_query(F.data == 'Q7')
async def end(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    logging.info(f"–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–†–µ–≥—É–ª–∏—Ä–æ–≤–æ—á–Ω–∞—è): {data}")   # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    user = {call.from_user.id: {key: (
        value if not isinstance(value, types.Location) else {"latitude": value.latitude, "longitude": value.longitude})
                                for key, value in data.items()}}

    # –°–æ–∑–¥–∞–µ–º multipart/form-data
    async with ClientSession() as session:
        form_data = aiohttp.FormData()

        # –°–æ–∑–¥–∞–µ–º JSON c –≥–µ–æ–¥–∞–Ω–Ω—ã–º–∏
        geo_data = {
            "type": "Point",
            "coordinates": [
                user[call.from_user.id]['location']['latitude'],
                user[call.from_user.id]['location']['longitude']
            ]
        }

        # –°–æ–∑–¥–∞–µ–º JSON –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è 'json'
        data_json = {
            'geo': geo_data,
            'city': user[call.from_user.id]['city'],
            'address': user[call.from_user.id]['address'],
            'description': user[call.from_user.id].get('description', ''),
            'contacts': {
                'email': user[call.from_user.id].get('email', ''),
                'whatsapp': user[call.from_user.id].get('whatsapp', ''),
                'telegram': user[call.from_user.id].get('telegram', ''),
                'phone': user[call.from_user.id].get('phone', '')
            },
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ form data
        form_data.add_field('json', json.dumps(data_json), content_type='application/json')

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        photos = data.get('photos', [])

        for idx, file_path in enumerate(photos):
            if idx < 5:  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤
                form_data.add_field(f'file{idx + 1}', open(file_path, 'rb'), filename=os.path.basename(file_path))

        async with session.post('https://sf-hackathon.xyz/api/reports/new', data=form_data) as response:

            # body = await response.text() # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if response.status == 201:
                await call.message.answer(text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏! \n"
                                               "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ!", reply_markup=f_s())
            else:
                await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä. \n"
                                          "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É")
                                          # F"–°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {body}") # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    await state.clear()
    await call.answer()

